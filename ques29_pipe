#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <stdlib.h>

int main() {
    int pipefd[2]; // Array to hold read and write file descriptors
    pid_t pid;
    char writeMessage[] = "Hello from parent process!";
    char readMessage[100];

    // Create the pipe
    if (pipe(pipefd) == -1) {
        perror("Pipe creation failed");
        return 1;
    }

    // Fork a child process
    pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        return 1;
    } else if (pid > 0) { // Parent process
        close(pipefd[0]); // Close the read end of the pipe
        printf("Parent: Writing to pipe...\n");
        write(pipefd[1], writeMessage, strlen(writeMessage) + 1); // Write message to pipe
        close(pipefd[1]); // Close the write end after writing
    } else { // Child process
        close(pipefd[1]); // Close the write end of the pipe
        read(pipefd[0], readMessage, sizeof(readMessage)); // Read message from pipe
        printf("Child: Received message from parent: %s\n", readMessage);
        close(pipefd[0]); // Close the read end after reading
    }

    return 0;
}
